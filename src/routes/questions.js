const express = require("express");
const router = express.Router();
const Question = require("../models/Question");
const Job = require("../models/job"); // Importer le mod√®le Job
const Application = require('../models/applications'); // Remplace ce chemin par le bon chemin vers ton mod√®le

// Middleware d'authentification
const verifyToken = require('../middlewares/authMiddleware');
// üìå Ajouter des questions pour un job pr√©cis
router.post("/:jobId", async (req, res) => {
  try {
    const { jobId } = req.params;
    const { questions } = req.body;

    // V√©rifier que des questions sont bien envoy√©es
    if (!questions || questions.length === 0) {
      return res.status(400).json({ error: "Les questions sont requises" });
    }

    // V√©rifier si le job existe
    const jobExists = await Job.findById(jobId);
    if (!jobExists) {
      return res.status(404).json({ error: "Le job sp√©cifi√© n'existe pas" });
    }

    // Ajouter les questions au job
    const newQuestions = new Question({ jobId, questions });
    await newQuestions.save();

    res.status(201).json({ message: "Questions ajout√©es avec succ√®s", newQuestions });
  } catch (error) {
    console.error("Erreur lors de l'ajout des questions:", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

// üìå R√©cup√©rer les questions d‚Äôun job pr√©cis
router.get("/:jobId", async (req, res) => {
  try {
    const { jobId } = req.params;

    // V√©rifier si le job existe
    const jobExists = await Job.findById(jobId);
    if (!jobExists) {
      return res.status(404).json({ error: "Le job sp√©cifi√© n'existe pas" });
    }

    // R√©cup√©rer les questions
    const questions = await Question.findOne({ jobId });

    if (!questions) {
      return res.status(404).json({ message: "Aucune question trouv√©e pour ce job" });
    }

    res.json(questions);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des questions:", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
});



// üìå üîÑ Mettre √† jour les questions d‚Äôun job
router.put("/:jobId", async (req, res) => {
    try {
      const { jobId } = req.params;
      const { questions } = req.body;
  
      if (!questions || questions.length === 0) {
        return res.status(400).json({ error: "Les questions sont requises" });
      }
  
      const jobExists = await Job.findById(jobId);
      if (!jobExists) {
        return res.status(404).json({ error: "Le job sp√©cifi√© n'existe pas" });
      }
  
      const updatedQuestions = await Question.findOneAndUpdate(
        { jobId },
        { questions },
        { new: true, upsert: true } // Met √† jour ou cr√©e si inexistant
      );
  
      res.json({ message: "Questions mises √† jour avec succ√®s", updatedQuestions });
    } catch (error) {
      console.error("Erreur lors de la mise √† jour des questions:", error);
      res.status(500).json({ error: "Erreur serveur" });
    }
  });
  
  // üìå ‚ùå Supprimer les questions d‚Äôun job
  router.delete("/:jobId", async (req, res) => {
    try {
      const { jobId } = req.params;
  
      const jobExists = await Job.findById(jobId);
      if (!jobExists) {
        return res.status(404).json({ error: "Le job sp√©cifi√© n'existe pas" });
      }
  
      const deletedQuestions = await Question.findOneAndDelete({ jobId });
  
      if (!deletedQuestions) {
        return res.status(404).json({ error: "Aucune question trouv√©e pour ce job" });
      }
  
      res.json({ message: "Questions supprim√©es avec succ√®s" });
    } catch (error) {
      console.error("Erreur lors de la suppression des questions:", error);
      res.status(500).json({ error: "Erreur serveur" });
    }
  });
 // Soumettre les r√©ponses d'entretien pour une candidature donn√©e
router.post('/applications/:applicationId/submit-answers',  async (req, res) => {
    const { applicationId } = req.params;
    const { answers } = req.body;  // Les r√©ponses envoy√©es par l'utilisateur
  
    try {
      // V√©rifier si l'application existe
      const application = await Application.findById(applicationId);
      if (!application) {
        return res.status(404).json({ message: 'Candidature non trouv√©e.' });
      }
  
      // V√©rifier si les r√©ponses sont pr√©sentes
      if (!answers || Object.keys(answers).length === 0) {
        return res.status(400).json({ message: 'Aucune r√©ponse soumise.' });
      }
  
      // Sauvegarder les r√©ponses dans la base de donn√©es
      application.answers = answers;  // Assurez-vous que votre mod√®le 'Application' a un champ pour stocker les r√©ponses.
      await application.save();
  
      return res.status(200).json({ message: 'R√©ponses soumises avec succ√®s.' });
    } catch (error) {
      console.error("Erreur lors de la soumission des r√©ponses :", error);
      return res.status(500).json({ message: 'Erreur interne du serveur.' });
    }
  });

  // Route pour r√©cup√©rer les questions d'entretien d'une candidature
// Route pour r√©cup√©rer les questions bas√©es sur le jobId d'une candidature
router.get('/applications/:applicationId/questions', async (req, res) => {
    try {
      // Trouver la candidature par son ID
      const application = await Application.findById(req.params.applicationId).populate('job');
      
      if (!application) {
        return res.status(404).json({ message: 'Candidature non trouv√©e.' });
      }
  
      // Trouver les questions associ√©es au jobId de la candidature
      const questions = await Question.find({ jobId: application.job._id });
  
      if (questions.length === 0) {
        return res.status(404).json({ message: 'Aucune question d\'entretien trouv√©e pour ce job.' });
      }
  
      // Retourner les questions de l'entretien
      res.json(questions[0].questions); // Les questions sont dans un tableau "questions"
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration des questions :", error);
      res.status(500).json({ message: 'Erreur serveur lors de la r√©cup√©ration des questions.' });
    }
  });

module.exports = router;
